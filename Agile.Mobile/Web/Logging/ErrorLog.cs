// Note: This file was originally generated by Genie

//===============================================================================
//
// ErrorLog
//
// PURPOSE: 
// Business layer implementation
//
// NOTES: 
// 
//
//===============================================================================
//
// Copyright (C) 2008 
// All rights reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED 'AS IS' WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================

using System;
using Agile.Framework;
using Agile.Diagnostics.Logging;

// needed for DateTime

namespace Agile.Mobile.Web.Logging
{

    /// <summary>
    /// ErrorLog
    /// </summary>
    public partial class ErrorLog : BaseBiz, IErrorLog
    {

        #region Constructors and Simple Factories

        /// <summary>
        /// Instantiate a new object with all REQUIRED field values.
        /// </summary>
        public static ErrorLog BuildNew(string message, string appVersion, string oS, DateTimeOffset createdUtc)
        {
            return new ErrorLog
            {
                Message = message
                , AppVersion = appVersion
                , OS = oS
                , CreatedUtc = createdUtc
            };

        }

        /// <summary>
        /// Instantiate from an object that implements IErrorLogData and has already been loaded
        /// </summary>
        public static ErrorLog Build(IErrorLogData data)
        {
            if (data == null)
                throw new ArgumentException("Required variable is null.", "data");

            var errorLog = new ErrorLog();
            errorLog.FillShallow(data);
            return errorLog;
        }

        #endregion

        #region Member Variables

        private long errorLogIdField;
        private string errorTypeField;
        private string messageField;
        private int? personIdField;
        private string usernameField;
        private string appVersionField;
        private string oSField;
        private string oSVersionField;
        private string deviceField;
        private string countryField;
        private string languageField;
        private DateTimeOffset createdUtcField;
        private DateTimeOffset? updatedUtcField;
        #endregion

        /// <summary>
        /// Returns true if the data for this object only has changed
        /// (ie not including collections or other referenced objects).
        /// If it is a new object (ie not loaded from somewhere) then this will always be true.
        /// </summary>
        public bool IsDirtyThis()
        {
            if (originalData == null)
                return true;
            return
                originalData.ErrorLogId != ErrorLogId
                || originalData.ErrorType != ErrorType
                || originalData.Message != Message
                || originalData.PersonId != PersonId
                || originalData.Username != Username
                || originalData.AppVersion != AppVersion
                || originalData.OS != OS
                || originalData.OSVersion != OSVersion
                || originalData.Device != Device
                || originalData.Country != Country
                || originalData.Language != Language
                || originalData.CreatedUtc != CreatedUtc
                || originalData.UpdatedUtc != UpdatedUtc;
        }

        #region Private Methods

        private IErrorLogData originalData;
        /// <summary>
        /// Gets the Original data (used for 'IsDirty')
        /// </summary>
        public IErrorLogData GetOriginalData()
        {
            return originalData;
        }

        /// <summary>
        /// Fill the IErrorLogData details from the data entity. Shallow Fill only.
        /// </summary>
        public override void FillShallow<TD>(TD model)
        {
            var data = model as IErrorLogData;
            originalData = data;
            if (data == null)
            {
                Logger.Warning("data object passed to ErrorLog.FillShallow was null");
                return;
            }

            // Members
            // need to set the property (not the member variable) to ensure the propertyChanged event is triggered (mainly for the ID)

            // Would be very dangerous to allow 'filling' with data that has a differnt Identifying value.
            if (ErrorLogId != 0 && data.ErrorLogId != 0 && ErrorLogId != data.ErrorLogId)
            {
                throw new Exception(string.Format("Trying to Fill ErrorLog[{0}] with data from ErrorLog[{1}].", ErrorLogId, data.ErrorLogId));
            }

            ErrorLogId = data.ErrorLogId;
            ErrorType = data.ErrorType;
            Message = data.Message;
            PersonId = data.PersonId;
            Username = data.Username;
            AppVersion = data.AppVersion;
            OS = data.OS;
            OSVersion = data.OSVersion;
            Device = data.Device;
            Country = data.Country;
            Language = data.Language;
            CreatedUtc = data.CreatedUtc;
            UpdatedUtc = data.UpdatedUtc;
        }

        #endregion

        #region IErrorLogData Member Properties

        /// <summary>
        /// Gets and sets ErrorLogId.  This is a primary key column.  
        /// </summary>
        public long ErrorLogId
        {
            get { return errorLogIdField; }
            set
            {
                if (errorLogIdField == value)
                    return;
                errorLogIdField = value;

                RaisePropertyChanged("ErrorLogId");
            }
        }

        /// <summary>
        /// Gets and sets ErrorType.    
        /// </summary>
        public string ErrorType
        {
            get { return errorTypeField; }
            set
            {
                if (errorTypeField == value)
                    return;
                errorTypeField = value;

                RaisePropertyChanged("ErrorType");
            }
        }

        /// <summary>
        /// Gets and sets Message.    
        /// </summary>
        public string Message
        {
            get { return messageField; }
            set
            {
                if (messageField == value)
                    return;
                messageField = value;

                RaisePropertyChanged("Message");
            }
        }

        /// <summary>
        /// Gets and sets PersonId.    
        /// </summary>
        public int? PersonId
        {
            get { return personIdField; }
            set
            {
                if (personIdField == value)
                    return;
                personIdField = value;

                RaisePropertyChanged("PersonId");
            }
        }

        /// <summary>
        /// Gets and sets Username.    
        /// </summary>
        public string Username
        {
            get { return usernameField; }
            set
            {
                if (usernameField == value)
                    return;
                usernameField = value;

                RaisePropertyChanged("Username");
            }
        }

        /// <summary>
        /// Gets and sets AppVersion.    
        /// </summary>
        public string AppVersion
        {
            get { return appVersionField; }
            set
            {
                if (appVersionField == value)
                    return;
                appVersionField = value;

                RaisePropertyChanged("AppVersion");
            }
        }

        /// <summary>
        /// Gets and sets OS.    
        /// </summary>
        public string OS
        {
            get { return oSField; }
            set
            {
                if (oSField == value)
                    return;
                oSField = value;

                RaisePropertyChanged("OS");
            }
        }

        /// <summary>
        /// Gets and sets OSVersion.    
        /// </summary>
        public string OSVersion
        {
            get { return oSVersionField; }
            set
            {
                if (oSVersionField == value)
                    return;
                oSVersionField = value;

                RaisePropertyChanged("OSVersion");
            }
        }

        /// <summary>
        /// Gets and sets Device.    
        /// </summary>
        public string Device
        {
            get { return deviceField; }
            set
            {
                if (deviceField == value)
                    return;
                deviceField = value;

                RaisePropertyChanged("Device");
            }
        }

        /// <summary>
        /// Gets and sets Country.    
        /// </summary>
        public string Country
        {
            get { return countryField; }
            set
            {
                if (countryField == value)
                    return;
                countryField = value;

                RaisePropertyChanged("Country");
            }
        }

        /// <summary>
        /// Gets and sets Language.    
        /// </summary>
        public string Language
        {
            get { return languageField; }
            set
            {
                if (languageField == value)
                    return;
                languageField = value;

                RaisePropertyChanged("Language");
            }
        }

        /// <summary>
        /// Gets and sets CreatedUtc.    
        /// </summary>
        public DateTimeOffset CreatedUtc
        {
            get { return createdUtcField; }
            set
            {
                if (createdUtcField == value)
                    return;
                createdUtcField = value;

                RaisePropertyChanged("CreatedUtc");
            }
        }

        /// <summary>
        /// Gets and sets UpdatedUtc.    
        /// </summary>
        public DateTimeOffset? UpdatedUtc
        {
            get { return updatedUtcField; }
            set
            {
                if (updatedUtcField == value)
                    return;
                updatedUtcField = value;

                RaisePropertyChanged("UpdatedUtc");
            }
        }

        #endregion

        #region Overrides


        /// <summary>
        /// Override of Equals operator. Evaluate if the id is different (important for Lookup types, especially when consider serialization)
        /// </summary>
        public static bool operator ==(ErrorLog a, ErrorLog b)
        {
            // If both are null, or both are same instance, return true.
            if (ReferenceEquals(a, b))
                return true;
            // If one is null, but not both, return false.
            if (((object)a == null) || ((object)b == null))
                return false;
            return a.Equals(b);
        }

        /// <summary>
        /// Override of NotEquals operator
        /// </summary>
        public static bool operator !=(ErrorLog a, ErrorLog b)
        {
            return !(a == b);
        }

        /// <summary>
        /// Override of GetHashCode
        /// </summary>
        public override int GetHashCode()
        {
            return ErrorLogId.GetHashCode();
        }

        /// <summary>
        /// Override Equals
        /// </summary>
        public override bool Equals(object obj)
        {
            var item = obj as ErrorLog;
            if (item == null)
                return false;
            return ErrorLogId.Equals(item.ErrorLogId);
        }

        /// <summary>
        /// Returns the ErrorLogId
        /// </summary>
        public override long GetId()
        {
            return ErrorLogId;
        }

        public override void SetId(long id)
        {
            ErrorLogId = id;
        }

        #endregion

        /// <summary>
        /// Validate the object
        /// </summary>
        public override bool Validate()
        {
            return GetFailedBusinessRules().Count == 0;
        }
        /// <summary>
        /// Valid deep load strategies that may be used when loading a ErrorLog.
        /// </summary>
        public class DeepLoad
        {
        }

        /// <summary>
        /// Generated validation rules.
        /// </summary>
        /// <remarks>Dont add new rules here. Override DefineRules() in the non generated partial class.</remarks>
        protected override void InternalDefineRules()
        {
            RuleCollection.Add(new BusinessRule("ErrorType"
            , "Value is too long, it must be less than 33 characters"
            , () => ErrorType == null || ErrorType.Length < 33));

            RuleCollection.Add(new BusinessRule("Message"
            , "Value is too long, it must be less than 4097 characters"
            , () => Message == null || Message.Length < 4097));

            RuleCollection.Add(new BusinessRule("Message"
            , "Message is a mandatory field."
            , () => !string.IsNullOrEmpty(Message)));

            RuleCollection.Add(new BusinessRule("Username"
            , "Value is too long, it must be less than 65 characters"
            , () => Username == null || Username.Length < 65));

            RuleCollection.Add(new BusinessRule("AppVersion"
            , "Value is too long, it must be less than 17 characters"
            , () => AppVersion == null || AppVersion.Length < 17));

            RuleCollection.Add(new BusinessRule("AppVersion"
            , "AppVersion is a mandatory field."
            , () => !string.IsNullOrEmpty(AppVersion)));

            RuleCollection.Add(new BusinessRule("OS"
            , "Value is too long, it must be less than 65 characters"
            , () => OS == null || OS.Length < 65));

            RuleCollection.Add(new BusinessRule("OS"
            , "OS is a mandatory field."
            , () => !string.IsNullOrEmpty(OS)));

            RuleCollection.Add(new BusinessRule("OSVersion"
            , "Value is too long, it must be less than 17 characters"
            , () => OSVersion == null || OSVersion.Length < 17));

            RuleCollection.Add(new BusinessRule("Device"
            , "Value is too long, it must be less than 257 characters"
            , () => Device == null || Device.Length < 257));

            RuleCollection.Add(new BusinessRule("Country"
            , "Value is too long, it must be less than 9 characters"
            , () => Country == null || Country.Length < 9));

            RuleCollection.Add(new BusinessRule("Language"
            , "Value is too long, it must be less than 33 characters"
            , () => Language == null || Language.Length < 33));

            RuleCollection.Add(new BusinessRule("CreatedUtc"
            , "CreatedUtc is a mandatory field."
            , () => CreatedUtc != null));

        }

    }

}
